{"ast":null,"code":"import React from 'react';\nimport { useChat } from './hooks/useChat';\nimport { darkModeTheme, useCustomStyles } from './hooks/useCustomStyles';\nimport { ChatProvider } from '../../context/ChatContext';\nimport { TranslationProvider } from '../../context/TranslationContext';\n/**\n * Wrapper component for a StreamChat application. Chat needs to be placed around any other chat components\n * as it provides the ChatContext.\n */\n\nexport var Chat = function (props) {\n  var children = props.children,\n      client = props.client,\n      customStyles = props.customStyles,\n      _a = props.darkMode,\n      darkMode = _a === void 0 ? false : _a,\n      defaultLanguage = props.defaultLanguage,\n      i18nInstance = props.i18nInstance,\n      _b = props.initialNavOpen,\n      initialNavOpen = _b === void 0 ? true : _b,\n      _c = props.theme,\n      theme = _c === void 0 ? 'messaging light' : _c,\n      _d = props.useImageFlagEmojisOnWindows,\n      useImageFlagEmojisOnWindows = _d === void 0 ? false : _d;\n\n  var _e = useChat({\n    client: client,\n    defaultLanguage: defaultLanguage,\n    i18nInstance: i18nInstance,\n    initialNavOpen: initialNavOpen\n  }),\n      channel = _e.channel,\n      closeMobileNav = _e.closeMobileNav,\n      mutes = _e.mutes,\n      navOpen = _e.navOpen,\n      openMobileNav = _e.openMobileNav,\n      setActiveChannel = _e.setActiveChannel,\n      translators = _e.translators;\n\n  useCustomStyles(darkMode ? darkModeTheme : customStyles);\n  if (!translators.t) return null;\n  return React.createElement(ChatProvider, {\n    value: {\n      channel: channel,\n      client: client,\n      closeMobileNav: closeMobileNav,\n      mutes: mutes,\n      navOpen: navOpen,\n      openMobileNav: openMobileNav,\n      setActiveChannel: setActiveChannel,\n      theme: theme,\n      useImageFlagEmojisOnWindows: useImageFlagEmojisOnWindows\n    }\n  }, React.createElement(TranslationProvider, {\n    value: translators\n  }, children));\n};","map":{"version":3,"sources":["/Users/rj/Documents/0. coding-project/medical-pager-chat/client/node_modules/stream-chat-react/dist/components/Chat/Chat.js"],"names":["React","useChat","darkModeTheme","useCustomStyles","ChatProvider","TranslationProvider","Chat","props","children","client","customStyles","_a","darkMode","defaultLanguage","i18nInstance","_b","initialNavOpen","_c","theme","_d","useImageFlagEmojisOnWindows","_e","channel","closeMobileNav","mutes","navOpen","openMobileNav","setActiveChannel","translators","t","createElement","value"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,aAAT,EAAwBC,eAAxB,QAA+C,yBAA/C;AACA,SAASC,YAAT,QAA6B,2BAA7B;AACA,SAASC,mBAAT,QAAoC,kCAApC;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,IAAI,GAAG,UAAUC,KAAV,EAAiB;AAC/B,MAAIC,QAAQ,GAAGD,KAAK,CAACC,QAArB;AAAA,MAA+BC,MAAM,GAAGF,KAAK,CAACE,MAA9C;AAAA,MAAsDC,YAAY,GAAGH,KAAK,CAACG,YAA3E;AAAA,MAAyFC,EAAE,GAAGJ,KAAK,CAACK,QAApG;AAAA,MAA8GA,QAAQ,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,KAAhB,GAAwBA,EAAjJ;AAAA,MAAqJE,eAAe,GAAGN,KAAK,CAACM,eAA7K;AAAA,MAA8LC,YAAY,GAAGP,KAAK,CAACO,YAAnN;AAAA,MAAiOC,EAAE,GAAGR,KAAK,CAACS,cAA5O;AAAA,MAA4PA,cAAc,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,IAAhB,GAAuBA,EAApS;AAAA,MAAwSE,EAAE,GAAGV,KAAK,CAACW,KAAnT;AAAA,MAA0TA,KAAK,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,iBAAhB,GAAoCA,EAAtW;AAAA,MAA0WE,EAAE,GAAGZ,KAAK,CAACa,2BAArX;AAAA,MAAkZA,2BAA2B,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,KAAhB,GAAwBA,EAAxc;;AACA,MAAIE,EAAE,GAAGpB,OAAO,CAAC;AAAEQ,IAAAA,MAAM,EAAEA,MAAV;AAAkBI,IAAAA,eAAe,EAAEA,eAAnC;AAAoDC,IAAAA,YAAY,EAAEA,YAAlE;AAAgFE,IAAAA,cAAc,EAAEA;AAAhG,GAAD,CAAhB;AAAA,MAAoIM,OAAO,GAAGD,EAAE,CAACC,OAAjJ;AAAA,MAA0JC,cAAc,GAAGF,EAAE,CAACE,cAA9K;AAAA,MAA8LC,KAAK,GAAGH,EAAE,CAACG,KAAzM;AAAA,MAAgNC,OAAO,GAAGJ,EAAE,CAACI,OAA7N;AAAA,MAAsOC,aAAa,GAAGL,EAAE,CAACK,aAAzP;AAAA,MAAwQC,gBAAgB,GAAGN,EAAE,CAACM,gBAA9R;AAAA,MAAgTC,WAAW,GAAGP,EAAE,CAACO,WAAjU;;AACAzB,EAAAA,eAAe,CAACS,QAAQ,GAAGV,aAAH,GAAmBQ,YAA5B,CAAf;AACA,MAAI,CAACkB,WAAW,CAACC,CAAjB,EACI,OAAO,IAAP;AACJ,SAAQ7B,KAAK,CAAC8B,aAAN,CAAoB1B,YAApB,EAAkC;AAAE2B,IAAAA,KAAK,EAAE;AAC3CT,MAAAA,OAAO,EAAEA,OADkC;AAE3Cb,MAAAA,MAAM,EAAEA,MAFmC;AAG3Cc,MAAAA,cAAc,EAAEA,cAH2B;AAI3CC,MAAAA,KAAK,EAAEA,KAJoC;AAK3CC,MAAAA,OAAO,EAAEA,OALkC;AAM3CC,MAAAA,aAAa,EAAEA,aAN4B;AAO3CC,MAAAA,gBAAgB,EAAEA,gBAPyB;AAQ3CT,MAAAA,KAAK,EAAEA,KARoC;AAS3CE,MAAAA,2BAA2B,EAAEA;AATc;AAAT,GAAlC,EAWJpB,KAAK,CAAC8B,aAAN,CAAoBzB,mBAApB,EAAyC;AAAE0B,IAAAA,KAAK,EAAEH;AAAT,GAAzC,EAAiEpB,QAAjE,CAXI,CAAR;AAYH,CAlBM","sourcesContent":["import React from 'react';\nimport { useChat } from './hooks/useChat';\nimport { darkModeTheme, useCustomStyles } from './hooks/useCustomStyles';\nimport { ChatProvider } from '../../context/ChatContext';\nimport { TranslationProvider } from '../../context/TranslationContext';\n/**\n * Wrapper component for a StreamChat application. Chat needs to be placed around any other chat components\n * as it provides the ChatContext.\n */\nexport var Chat = function (props) {\n    var children = props.children, client = props.client, customStyles = props.customStyles, _a = props.darkMode, darkMode = _a === void 0 ? false : _a, defaultLanguage = props.defaultLanguage, i18nInstance = props.i18nInstance, _b = props.initialNavOpen, initialNavOpen = _b === void 0 ? true : _b, _c = props.theme, theme = _c === void 0 ? 'messaging light' : _c, _d = props.useImageFlagEmojisOnWindows, useImageFlagEmojisOnWindows = _d === void 0 ? false : _d;\n    var _e = useChat({ client: client, defaultLanguage: defaultLanguage, i18nInstance: i18nInstance, initialNavOpen: initialNavOpen }), channel = _e.channel, closeMobileNav = _e.closeMobileNav, mutes = _e.mutes, navOpen = _e.navOpen, openMobileNav = _e.openMobileNav, setActiveChannel = _e.setActiveChannel, translators = _e.translators;\n    useCustomStyles(darkMode ? darkModeTheme : customStyles);\n    if (!translators.t)\n        return null;\n    return (React.createElement(ChatProvider, { value: {\n            channel: channel,\n            client: client,\n            closeMobileNav: closeMobileNav,\n            mutes: mutes,\n            navOpen: navOpen,\n            openMobileNav: openMobileNav,\n            setActiveChannel: setActiveChannel,\n            theme: theme,\n            useImageFlagEmojisOnWindows: useImageFlagEmojisOnWindows,\n        } },\n        React.createElement(TranslationProvider, { value: translators }, children)));\n};\n"]},"metadata":{},"sourceType":"module"}