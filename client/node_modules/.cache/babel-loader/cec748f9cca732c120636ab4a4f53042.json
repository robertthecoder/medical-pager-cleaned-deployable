{"ast":null,"code":"var _jsxFileName = \"/Users/rj/Documents/0. coding-project/medical-pager-chat/client/src/components/ChannelSearch.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useChatContext } from 'stream-chat-react'; // import {useSelector, useDispatch} from 'react-redux';\n\nimport ResultsDropdown from './ResultsDropdown';\nimport { SearchIcon } from '../assets';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChannelSearch = ({\n  setToggleContainer\n}) => {\n  _s();\n\n  const {\n    client,\n    setActiveChannel\n  } = useChatContext();\n  const [query, setQuery] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [teamChannels, setTeamChannels] = useState([]);\n  const [directChannels, setDirectChannels] = useState([]);\n  useEffect(() => {\n    if (!query) {\n      setTeamChannels([]);\n      setDirectChannels([]);\n    }\n  }, [query]);\n\n  const getChannels = async text => {\n    try {\n      const channelResponse = client.queryChannels({\n        type: 'team',\n        name: {\n          $autocomplete: text\n        },\n        members: {\n          $in: [client.userID]\n        }\n      });\n      const userResponse = client.queryUsers({\n        id: {\n          $ne: client.userID\n        },\n        // exclude ourselves\n        name: {\n          $autocomplete: text\n        }\n      }); // by adding await here, we can start 'channelResponse\" and 'userResponse\" at the same time\n\n      const [channels, {\n        users\n      }] = await Promise.all([channelResponse, userResponse]);\n      if (channels.length) setTeamChannels(channels);\n      if (users.length) setDirectChannels(users);\n    } catch (error) {\n      setQuery('');\n    }\n  };\n\n  const onSearch = event => {\n    event.preventDefault();\n    setLoading(true);\n    setQuery(event.target.value);\n    getChannels(event.target.value);\n  };\n\n  const setChannel = channel => {\n    setQuery('');\n    setActiveChannel(channel);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"channel-search__container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"channel-search__input__wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"channel-search__input__icon\",\n        children: /*#__PURE__*/_jsxDEV(SearchIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"channel-search__input__text\",\n        placeholder: \"Search\",\n        type: \"text\",\n        value: query,\n        onChange: onSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), query && /*#__PURE__*/_jsxDEV(ResultsDropdown, {\n      teamChannels: teamChannels,\n      directChannels: directChannels,\n      loading: loading,\n      setChannel: setChannel,\n      setQuery: setQuery,\n      setToggleContainer: setToggleContainer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ChannelSearch, \"8MS4ffuLD+JTR6AFOgkyxbd2B0w=\", false, function () {\n  return [useChatContext];\n});\n\n_c = ChannelSearch;\nexport default ChannelSearch;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChannelSearch\");","map":{"version":3,"sources":["/Users/rj/Documents/0. coding-project/medical-pager-chat/client/src/components/ChannelSearch.jsx"],"names":["React","useState","useEffect","useChatContext","ResultsDropdown","SearchIcon","ChannelSearch","setToggleContainer","client","setActiveChannel","query","setQuery","loading","setLoading","teamChannels","setTeamChannels","directChannels","setDirectChannels","getChannels","text","channelResponse","queryChannels","type","name","$autocomplete","members","$in","userID","userResponse","queryUsers","id","$ne","channels","users","Promise","all","length","error","onSearch","event","preventDefault","target","value","setChannel","channel"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport {useChatContext} from 'stream-chat-react';\n// import {useSelector, useDispatch} from 'react-redux';\n\nimport ResultsDropdown from './ResultsDropdown';\n\nimport {SearchIcon} from '../assets';\n\nconst ChannelSearch = ({setToggleContainer}) => {\n    const {client, setActiveChannel} = useChatContext();\n    const [query, setQuery] = useState('');\n    const [loading, setLoading] = useState(false);\n    const [teamChannels, setTeamChannels] = useState([])\n    const [directChannels, setDirectChannels] = useState([])\n    \n    useEffect(() => {\n        if(!query) {\n            setTeamChannels([])\n            setDirectChannels([])\n        }\n    }, [query])\n\n    const getChannels = async(text) => {\n        try {\n            const channelResponse = client.queryChannels({\n                type: 'team', name: {$autocomplete: text}, members: {$in: [client.userID]}\n            });\n\n            const userResponse = client.queryUsers({\n                id: {$ne: client.userID}, // exclude ourselves\n                name: {$autocomplete: text}\n\n            });\n\n            // by adding await here, we can start 'channelResponse\" and 'userResponse\" at the same time\n            const [channels, {users}] = await Promise.all([channelResponse, userResponse]);\n\n            if(channels.length) setTeamChannels(channels);\n            if(users.length) setDirectChannels(users);\n        } catch(error) {\n            setQuery('');\n        }\n\n    }\n\n\n    const onSearch = (event) => {\n        event.preventDefault();\n\n        setLoading(true);\n        setQuery(event.target.value);\n        getChannels(event.target.value);\n    }\n\n    const setChannel = (channel) => {\n        setQuery('');\n        setActiveChannel(channel);\n\n    }\n\n    return (\n        <div className=\"channel-search__container\">\n            <div className=\"channel-search__input__wrapper\">\n                <div className=\"channel-search__input__icon\">\n                    <SearchIcon />\n                </div>\n                <input className=\"channel-search__input__text\" placeholder=\"Search\" type=\"text\" value={query} onChange={onSearch}/>\n            </div>\n\n            {query && (\n                <ResultsDropdown \n                    teamChannels={teamChannels}\n                    directChannels={directChannels}\n                    loading={loading}\n                    setChannel={setChannel}\n                    setQuery={setQuery}\n                    setToggleContainer={setToggleContainer}\n                />\n            )}\n        </div>\n        \n    )\n}\n\nexport default ChannelSearch;"]},"metadata":{},"sourceType":"module"}